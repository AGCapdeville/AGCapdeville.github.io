{"version":3,"sources":["components/nav/nav.module.scss","components/nav/nav.jsx","components/Githubhook.js","components/Home.js","data/data.js","components/Portfolio.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","path","useLocation","pathname","getClassname","activeLink","link","className","container","to","url","console","log","useState","data","setData","isLoading","setIsLoading","isError","setIsError","useEffect","a","axios","method","then","res","catch","err","fetchData","useGithubApi","repos","indexOfOldest","i","numberOfRepos","Object","keys","length","oldestDate","mapRepos","Home","src","alt","Githubhook","Portfolio","style","float","paddingTop","React","Component","Footer","href","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a21023b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"nav_container__30K7Z\",\"name\":\"nav_name__2-A1V\",\"links\":\"nav_links__1zgQq\",\"link\":\"nav_link__2H2KV\",\"bars\":\"nav_bars__wWN5l\",\"activeLink\":\"nav_activeLink__3vBYR\",\"show\":\"nav_show__2dxWu\"};","import React, { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport {\n    container,\n    name,\n    links,\n    link,\n    activeLink,\n    bars,\n    show,\n  } from './nav.module.scss';\n\nconst Nav = () => {\n\n    const { pathname: path } = useLocation();\n    \n    const getClassname = (pathname) => {\n        return pathname === path ? activeLink : link\n    };\n\n    return(\n        <div className={container}>\n            <div>\n            <Link to=\"/\" className={getClassname('/')}>Home</Link>\n            </div>\n            <div>\n            <Link to=\"/portfolio\" className={getClassname('/portfolio')}>Portfolio</Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Nav;","import React, { useState, useEffect  } from 'react';\nimport '../App.css';\nimport {user} from '../data/data'\nimport axios from 'axios';\n\n// constructor(props) {\n//   super(props)\n//   this.state = { data: [] }\n// }\n\nconst useGithubApi = (url) => {\n  {console.log(\"url:\"+url)} \n\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      axios(\n        {\n        method: \"get\",\n        url: url,\n        }\n      )\n      .then(res => {\n        console.log(\" Response: \\n\",res);\n        setData(res.data);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        setIsError(true);\n      });\n    };\n    fetchData();\n  },[]);\n  return [{data, isLoading, isError }];\n}\n\n\nfunction mapRepos(repos){\n  if (repos == null){\n    return (\"still loading\")\n  }else{\n    var numberOfRepos= Object.keys(repos).length;\n    var oldestDate = repos[0][\"updated_at\"];\n    var indexOfOldest;\n    \n    var i;\n    for(i=0 ; i < numberOfRepos; i++){\n      if(oldestDate < repos[i][\"updated_at\"]){\n        oldestDate = repos[i][\"updated_at\"];\n        indexOfOldest = i;\n      }\n    }\n    return( indexOfOldest )\n  }\n}\n\n\n\nexport default () => {\n  const [{data, isLoading, isError}] = useGithubApi(`https://api.github.com/users/agcapdeville/repos`);\n\n  var name = \"Loading...\";\n  var list = [];\n\n  isLoading ? name=\"loading...\" : name = ( \"name: \"+data[mapRepos(data)][\"name\"] );\n\n  // isLoading ? list[]\n\n\n  return( name );\n};\n\n\n\n\n\n{/* <p>Full_Name: {item.full_name}</p>\n<p>Age: {item.owner.login}</p> */}\n\n// -- Notes:\n// \n// // hooks.js\n// import { useState } from 'react';\n// export const useAction = (action) => {\n//   const [loading, setLoading] = useState(false);\n//   const [data, setData] = useState(null);\n//   const [error, setError] = useState(null);\n//   // The incoming \"action\" argument to the hook is NOT performed.\n//   // It is only stored in the function scope; so that, we can use it when\n//   // performing the action using the following function\n//   // This function is returned as the second element in the returned array\n//   const performAction = async (body = null) => {\n//     try {\n//       setLoading(true);\n//       setData(null);\n//       setError(null);\n//       const data = await action(body);\n//       setData(data);\n//     } catch (e) {\n//       setError(e);\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n//   return [{ loading, data, error }, performAction];\n// }\n\n\n\n// const [githubData, setData] = useState([]);\n// const asyncComponent = () => \n// useEffect( () => {\n//     let ignore = false;\n//     const fetchData = async () => {\n//     const result = await axios(`https://api.github.com/users/${user}`);\n//     if(!ignore) {\n//         setData(result);\n//     }\n//     }\n//     fetchData();\n//     return () => { ignore = true; }\n// }, [githubData]);\n\n\n\n\n///\n      // axios.get(url)\n      // .then(response => {\n      //   const repos = response;\n\n      //   setData(repos);\n      //   setIsLoading(false);\n      // }, error => {\n      //   console.log(error);\n      //   setIsError(true);\n      // });","import React from \"react\";\n// TODO: remove App.css, convert Home to Home folder with Home .js .jsx & .scss files\nimport '../App.css'; \nimport Githubhook from './Githubhook';\n\n\nimport {descrip} from '../data/data.js'\nconst Home = () => (\n    <div className='Text_color_offwhite'>\n        <header className='App-body'>\n            <div className='Section_color'>\n                <div className='App-img'>\n                    <img src=\"https://i.imgur.com/eDmARH5.jpg\" className=\"rounded-circle\" alt=\"profile img\"/>\n                </div>\n                <div className='MainTitle'>\n                    Adam G Capdeville\n                </div>\n            </div>\n            <div className='App-description'>\n                <p>\n                    <div> {descrip} </div> \n                </p>\n            </div>\n            <div>\n                <p>What I am currently working on: <Githubhook/></p>\n            </div>\n\n            <div className='SkillSection' >\n                <div className=\"Title\"> <b>Skills</b> </div>\n                <div className='grid-hero'>\n                    <div className='SubTitle'> Languages </div> \n                    <div className='SubTitle'> Frameworks & Libraries </div>\n                    <div className='SubTitle'> Database </div>\n                    <ul> \n                        <li>Java</li>\n                        <li>C / C++</li>\n                        <li>C#</li>\n                        <li>CSS</li>\n                        <li>HTML</li>\n                        <li>JavaScript</li>\n                        </ul>\n                    <ul> \n                        <li>React</li>\n                        <li>React-Native</li>\n                        <li>Bootstrap</li>\n                        </ul>\n                    <ul>\n                        <li>MySQL</li>\n                        <li>MongoDB</li>\n                        </ul>\n                    </div>\n                </div>\n        </header>\n\n    </div>\n)\n\nexport default Home\n\n\n","\n\n\nexport const user = 'AGCapdeville'\n\nexport const descrip = `Currently, I am a computer science student at CSUCI who has a passion\nfor intelligent code, whether it's intelligently written or written to exhibit intelligence.`;\n\n","import React from 'react';\n// TODO: remove App.css, convert Portfolio to folder with Portfolio .js .jsx & .scss files\nimport '../App.css';\n\nclass Portfolio extends React.Component {\n    render () {\n      return( \n        <div className=\"App-body\">\n            <header className=\"App-body Section_color_grey\" >\n                <div style={{float : 'center', paddingTop : '20px'}}>\n                    <h1>Portfolio</h1>\n                </div>\n            </header>\n        </div>\n        )      \n    }\n}\n\nexport default Portfolio","import React from 'react';\n// import './App.css';\n\nconst Footer = () => {\n  return (    \n    <footer className=\"App-footer\"> \n      <div>  \n        Adam Capdeville 2019 | \n          <a\n            className=\"App-link\"\n            href=\"https://www.linkedin.com/in/adamcapdeville/\"> \n            <b> Linkedin </b>\n          </a> |\n          <a \n            className=\"App-link\"\n            href=\"https://github.com/AGCapdeville/\"\n          >\n            <b> GitHub</b>\n          </a>\n        </div>  \n    </footer>\n  );\n}\n\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Nav from './components/nav';\nimport Home from './components/Home.js';\nimport Portfolio from './components/Portfolio.js';\nimport Footer from './components/Footer.js';\nimport NotFound from './components/NotFound.js'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Githubhook from './components/Githubhook';\n\nconst App = () => {\n  return(\n    <Router>\n      <div>\n        <Nav/>\n        <div>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/portfolio\" component={Portfolio} />\n        </div>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}