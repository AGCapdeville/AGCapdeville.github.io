{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","Footer.js","Nav_bar.js","index.js"],"names":["module","exports","App","className","src","class","href","target","rel","Boolean","window","location","hostname","match","Footer","Nav_bar","Navbar","bg","variant","Toggle","aria-controls","Collapse","id","Nav","Link","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,mHC0B5BC,MAtBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAEhB,yBAAKC,IAAI,kCAAkCC,MAAM,eACjD,8CAGA,uBACEF,UAAU,WACVG,KAAK,yDACLC,OAAO,SACPC,IAAI,uBAEJ,qCANF,kBCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCSSC,MAxBf,WACE,OACE,yBAAKX,UAAU,UACb,gCACE,oDAEE,uBAAGG,KAAK,+CAAR,YAFF,IAME,uBACEH,UAAU,WACVG,KAAK,yDACLC,OAAO,SACPC,IAAI,uBAEN,qCANA,mB,gBCUKO,MAnBf,WACE,OACE,6BACE,oCACA,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7B,kBAACJ,EAAA,EAAOK,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKpB,UAAU,WACb,kBAACoB,EAAA,EAAIC,KAAL,CAAUlB,KAAK,SAAf,mBACA,kBAACiB,EAAA,EAAIC,KAAL,CAAUlB,KAAK,aAAf,aACA,kBAACiB,EAAA,EAAIC,KAAL,CAAUlB,KAAK,QAAf,cCNZmB,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,QACrDH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SACjDH,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,WHuH9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0a183ac7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <img src=\"https://i.imgur.com/eDmARH5.jpg\" class=\"img-circle\"/>\n        <p>\n          Adam Capdeville\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/AGCapdeville/AGCapdeville.github.io\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <b>GitHub</b> Pages Repo\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n\nfunction Footer() {\n  return (    \n    <div className=\"footer\">\n      <footer>\n        <p>\n          Adam Capdeville 2019 | \n          <a href=\"https://www.linkedin.com/in/adamcapdeville/\"\n          >Linkedin\n          </a>\n          | \n          <a \n            className=\"App-link\"\n            href=\"https://github.com/AGCapdeville/AGCapdeville.github.io\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n          <b>GitHub</b> Pages Repe \n          </a>\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\nfunction Nav_bar() {\n  return (  \n    <div>\n      <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#HOME\">Adam Capdeville</Nav.Link>\n            <Nav.Link href=\"portfolio\">Portfolio</Nav.Link>\n            <Nav.Link href=\"blog\">Blog</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      </>\n    </div>\n  );\n}\n\nexport default Nav_bar;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Footer from './Footer';\nimport Nav_bar from './Nav_bar';\n\nReactDOM.render(<Nav_bar />, document.getElementById('nav'));\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Footer />, document.getElementById('footer'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}