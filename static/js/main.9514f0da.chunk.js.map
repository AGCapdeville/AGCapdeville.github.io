{"version":3,"sources":["components/nav/nav.module.scss","components/footer/footer.module.scss","components/portfolio/portfolio.module.scss","app.module.scss","components/fof/fof.module.scss","components/home/home.module.scss","data/data.js","components/github/CurrentRepoHook.js","components/nav/nav.jsx","components/footer/footer.jsx","components/home/home.jsx","components/portfolio/portfolio.jsx","App.js","serviceWorker.js","index.js","components/github/github.module.scss"],"names":["module","exports","languages","frameworks","databases","url","useState","data","setData","isLoading","setIsLoading","isError","setIsError","useEffect","a","axios","method","then","res","console","log","catch","err","fetchData","useGithubApi","current","obj","numRepos","Object","keys","length","curRepo","curDate","Date","indexDate","i","iNewestRepo","link","d","parse","day","getDate","monthName","getMonth","year","getFullYear","updated","className","container","text","repoRow","blinkyGreen","href","dateRow","dateText","Nav","path","useLocation","pathname","getClassname","activeLink","navbar","navbarOp","to","navbarAlignRight","preserve","Footer","target","Language","language","Framework","framework","Database","database","Home","body","profileImage","src","alt","name","about","listContainer","list","listTitle","map","portfolio","moduleBody","item","title","App","styles","app","exact","component","Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9514f0da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"nav_navbar__2mmhG\",\"navbarOp\":\"nav_navbarOp__2vB1R\",\"navbarAlignRight\":\"nav_navbarAlignRight__5xAOZ\",\"links\":\"nav_links__1zgQq\",\"link\":\"nav_link__2H2KV\",\"activeLink\":\"nav_activeLink__3vBYR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"footer_container__3Mbmx\",\"link\":\"footer_link__rNuqK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moduleBody\":\"portfolio_moduleBody___fvgF\",\"item\":\"portfolio_item__3ERZQ\",\"title\":\"portfolio_title__I6VGA\",\"moduleSkill\":\"portfolio_moduleSkill__1RIoX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__3FwrV\",\"header\":\"app_header__2g4Pw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"fof_container__2u0Jj\",\"foruOfour\":\"fof_foruOfour__1YtZd\",\"link\":\"fof_link__1BaZz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileImage\":\"home_profileImage__14Cai\",\"body\":\"home_body__29f9y\",\"name\":\"home_name__3CsP9\",\"about\":\"home_about__3JKpd\",\"listTitle\":\"home_listTitle__3UZuk\",\"listContainer\":\"home_listContainer__2xar_\",\"list\":\"home_list__1bzUO\"};","\nexport const user = 'AGCapdeville'\n\nexport const descrip = ` Software engineer currently attending CSU Channel Islands. \nPassionately chasing after my dreams of coding glory. \nTaking on high EXP quests (programming projects), sharping my weapons and honing my skills (further developing my set of programing languages).\nWorking my way to defeating the final boss (obtaining that dream job).`;\n\nexport const languages = ['JavaScript','HTML','CSS','Java','C / C++','C#'];\nexport const frameworks = ['React','React-Native','Bootstrap'];\nexport const databases = ['MySQL','MongoDB'];","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { blinkyGreen, container, dateText, repoRow, dateRow, text } from './github.module.scss';\nimport { user } from '../../data/data'\n\nconst useGithubApi = url => {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      axios(\n        {\n          method: \"get\",\n          url: url,\n        }\n      )\n        .then(res => {\n          console.log(\" Response: \\n\", res);\n          setData(res.data);\n          setIsLoading(false);\n        })\n        .catch(err => {\n          setIsError(true);\n        });\n    };\n    fetchData();\n  }, [url]);\n\n  return [{ data, isLoading, isError }];\n}\n\nfunction iNewestRepo(obj) {\n  var numRepos = Object.keys(obj).length;\n  var curRepo = 0;\n  var curDate = new Date(obj[curRepo][\"updated_at\"]);\n  var indexDate = new Date(obj[0][\"updated_at\"]);\n  var i = 0;\n  for (i = 0; i < numRepos; i++) {\n    indexDate = new Date(obj[i][\"updated_at\"]);\n    if (indexDate > curDate) {\n      curDate = indexDate;\n      curRepo = i;\n    }\n  }\n  return (curRepo);\n}\n\nfunction getMonthName(monthNumber) {\n  var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  return (month[monthNumber]);\n}\n\nexport default () => {\n  var url = `https://api.github.com/users/${user}/repos`;\n  const [{ data, isLoading }] = useGithubApi(url);\n\n  if (isLoading) {\n    return (\"loading...\");\n  } else {\n    var current = iNewestRepo(data);\n    var link = `https://github.com/${user}/${data[current][\"name\"]}`;\n\n    const d = new Date(Date.parse(data[current][\"updated_at\"]));\n    const day = d.getDate();\n    const monthName = getMonthName(d.getMonth());\n    const year = d.getFullYear();\n\n    const updated = `${monthName}, ${day}, ${year}`;\n\n    return (\n      <div className={container}>\n        <div className={text} > CURRENTLY WORKING ON: </div>\n        <div className={repoRow}>\n          <div className={blinkyGreen} />\n          [<a href={link}> {data[current][\"name\"]} </a>]\n        </div>\n        <div className={dateRow}>\n          Updated: [<div className={dateText}> {updated} </div>]\n        </div>\n      </div>\n    )\n  }\n};\n","import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport CurRepo from \"../github/CurrentRepoHook\";\nimport {\n  navbar,\n  navbarOp,\n  navbarAlignRight,\n  link,\n  activeLink\n} from \"./nav.module.scss\";\n\nconst Nav = () => {\n  const { pathname: path } = useLocation();\n\n  const getClassname = pathname => {\n    return pathname === path ? activeLink : link;\n  };\n\n  return (\n    <div className={navbar}>\n      <div className={navbarOp}>\n        <Link to=\"/\" className={getClassname(\"/\")}>\n          Home\n        </Link>\n        <Link to=\"/portfolio\" className={getClassname(\"/portfolio\")}>\n          Portfolio\n        </Link>\n      </div>\n      <div className={navbarAlignRight}>\n        <CurRepo />\n      </div>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport { container, link } from \"./footer.module.scss\";\n\nconst year = new Date().getFullYear();\nconst preserve = `Adam Capdeville ${year} `;\n\nconst Footer = () => {\n  return (\n    <div className={container}>\n      {preserve}|{\" \"}\n      <a\n        className={link}\n        href=\"https://www.https://github.com/AGCapdeville/AGCapdeville.github.io\" target=\"_blank\" >\n        Source\n      </a>\n      |{\" \"}\n      <a className={link} \n      href=\"https://www.linkedin.com/in/adamcapdeville/\" target=\"_blank\" >\n        Linkedin\n      </a>\n      |{\" \"}\n      <a className={link} href=\"https://github.com/AGCapdeville/\" target=\"_blank\" >\n        GitHub\n      </a>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { descrip, languages, frameworks, databases } from \"../../data/data\";\n\nimport {\n  profileImage,\n  body,\n  name,\n  about,\n  listTitle,\n  listContainer,\n  list\n} from \"./home.module.scss\";\n\nconst Language = (language) => <li>{language}</li>;\nconst Framework = (framework) => <li>{framework}</li>;\nconst Database = (database) => <li>{database}</li>;\n\nconst Home = () => (\n  <div className={body}>\n    <div className={profileImage}>\n      <img\n        src=\"https://i.imgur.com/NYjsR8e.jpg\"\n        className=\"rounded-circle\"\n        alt=\"profile img\"\n      />\n    </div>\n    <div className={name}>Adam G Capdeville</div>\n    <div className={about}>\n      <p>{descrip}</p>\n    </div>\n\n    <div className={name}>\n        <b>Skills</b>\n    </div>\n\n    <div className={listContainer}>\n      <div className={list}>\n        <div className={listTitle}> Languages </div>\n          {languages.map(Language)}\n      </div>\n      <div className={list}>\n        <div className={listTitle}> Frameworks & Libraries </div>\n        {frameworks.map(Framework)}\n      </div>\n      <div className={list}>\n        <div className={listTitle}> Database </div>\n        {databases.map(Database)}\n      </div>\n    </div>\n    \n  </div>\n);\n\nexport default Home;\n","import React from \"react\";\n// TODO: remove App.css, convert Portfolio to folder with Portfolio .js .jsx & .scss files\nimport { moduleBody, item, title} from \"./portfolio.module.scss\";\n\nconst portfolio = () => {\n  return (\n    <div className={moduleBody}>\n      <div className={item}>\n        <div className={title}> Coming soon...</div>\n        <h4>For now check out my <a href={\"https://github.com/AGCapdeville\"} target=\"_blank\"> GitHub </a> </h4>\n      </div>\n    </div>\n  );\n};\n\nexport default portfolio;\n","import React from 'react';\nimport styles from './app.module.scss';\nimport Nav from './components/nav';\nimport Footer from './components/footer';\nimport Home from './components/home';\nimport Portfolio from './components/portfolio';\nimport FoF from './components/fof';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div className={styles.container}>\n        <Nav />\n        <div className={styles.app}>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/portfolio\" component={Portfolio} />\n          {/* <Route component={FoF} /> */}\n        </div>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"github_container__3R5IX\",\"repoRow\":\"github_repoRow__pcL-l\",\"dateRow\":\"github_dateRow__3kmaE\",\"dateText\":\"github_dateText__2mydL\",\"blinkyGreen\":\"github_blinkyGreen__RwTP3\",\"blinkGreen\":\"github_blinkGreen__whmxg\",\"text\":\"github_text__1WUBf\"};"],"sourceRoot":""}